// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.packt.abuzar.extractingmodel.list;

import android.app.Application;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class MainPresenter_Factory implements Factory<MainPresenter> {
  private final Provider<Application> applicationProvider;

  private final Provider<ProjectRepository> projectRepositoryProvider;

  public MainPresenter_Factory(
      Provider<Application> applicationProvider,
      Provider<ProjectRepository> projectRepositoryProvider) {
    this.applicationProvider = applicationProvider;
    this.projectRepositoryProvider = projectRepositoryProvider;
  }

  @Override
  public MainPresenter get() {
    MainPresenter instance = new MainPresenter(applicationProvider.get());
    MainPresenter_MembersInjector.injectProjectRepository(
        instance, projectRepositoryProvider.get());
    return instance;
  }

  public static Factory<MainPresenter> create(
      Provider<Application> applicationProvider,
      Provider<ProjectRepository> projectRepositoryProvider) {
    return new MainPresenter_Factory(applicationProvider, projectRepositoryProvider);
  }

  public static MainPresenter newMainPresenter(Application application) {
    return new MainPresenter(application);
  }
}
